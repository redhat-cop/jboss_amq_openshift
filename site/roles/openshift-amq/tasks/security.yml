- name: Create temporary directory to hold generated certificates and keystore
  tempfile:
    state: directory
  register: cert_dir

- name: Generate passowrds
  block:
    - name: Generate PKCS#12 password
      set_fact:
        pkcs12_password: "{{ lookup('password', '/dev/null length=15') }}"
      when: pkcs12_password is not defined

    - name: Generate key store password
      set_fact:
        keystore_password: "{{ lookup('password', '/dev/null length=15') }}"
      when: keystore_password is not defined

    - name: Generate trust store password
      set_fact:
        truststore_password: "{{ lookup('password', '/dev/null length=15') }}"
      when: truststore_password is not defined

- name: Generate certificates and PKCS#12 file
  block:
    - name: Derive PKCS#12 generated file path name
      set_fact:
        pkcs12_generated_file: "{{ cert_dir.path }}/chain.p12"

    - name: Generate certificate private key
      openssl_privatekey:
        path: "{{ cert_dir.path }}/key.pem"

    - name: Generate certificate sign request
      openssl_csr:
        path: "{{ cert_dir.path }}/csr.pem"
        privatekey_path: "{{ cert_dir.path }}/key.pem"
        common_name: broker-amq
        country_name: US
        state_or_province_name: CA
        locality_name: San Diego
        organization_name: Sempra Energy
        organizational_unit_name: IT

    - name: Generate certificate
      openssl_certificate:
        path: "{{ cert_dir.path }}/certificate.pem"
        privatekey_path: "{{ cert_dir.path }}/key.pem"
        csr_path: "{{ cert_dir.path }}/csr.pem"
        provider: selfsigned

    - name: Create PKCS#12
      openssl_pkcs12:
        action: export
        path: "{{ pkcs12_generated_file }}"
        friendly_name: "{{ pkcs12_alias }}"
        certificate_path: "{{ cert_dir.path }}/certificate.pem"
        privatekey_path: "{{ cert_dir.path }}/key.pem"
        passphrase: "{{ pkcs12_password }}"
        state: present

    - name: Ensure generated PKCS#12 file is used
      set_fact:
        pkcs12_file: "{{ pkcs12_generated_file }}"
  when: pkcs12_file is not defined

- name: Import PKCS#12 into key store
  java_cert:
    pkcs12_path: "{{ pkcs12_file }}"
    pkcs12_password: "{{ pkcs12_password }}"
    pkcs12_alias: "{{ pkcs12_alias }}"
    cert_alias: broker
    keystore_path: "{{ cert_dir.path }}/{{ amq_keystore }}"
    keystore_pass: "{{ keystore_password }}"
    keystore_create: yes
    state: present

- name: Obtain all certificates from PKCS#12 file
  openssl_pksc12_certificate_chain:
    src: "{{ pkcs12_file }}"
    passphrase: "{{ pkcs12_password }}"
  register: chain

- name: Write certificate to temporary PEM file
  copy:
    content: "{{ item.certificate }}"
    dest: "{{ cert_dir.path }}/{{ item.name }}.pem"
  with_items:
    - "{{ chain.certificates }}"
  loop_control:
    label: "{{ item.subject }}"

- name: Generate trust store
  java_cert:
    cert_path: "{{ cert_dir.path }}/{{ item.name }}.pem"
    cert_alias: "{{ item.name }}"
    keystore_path: "{{ cert_dir.path }}/{{ amq_truststore }}"
    keystore_pass: "{{ truststore_password }}"
    keystore_create: yes
    state: present
  with_items:
    - "{{ chain.certificates }}"
  loop_control:
    label: "{{ item.subject }}"
